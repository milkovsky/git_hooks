#!/bin/sh
error="false"

# The URL to login 
loginurl=$(git config hooks.tagretloginurl || echo $error) 
# check URL
if [ "$loginurl" == $error ]; then
	# URL error
	echo "error: Login failed"
	echo "You must configure your repository and set \"tagretloginurl\" config paraneter"
	echo "Go to your repository and run: git config hooks.tagretloginurl <url>"
	echo "Or add \"tagretloginurl\" parameter to your config file"
	exit
fi

# username
username=$(git config hooks.tagretloginusername || echo $error) 
# check username
if [ "$username" == $error ]; then
	# URL error
	echo "error: Login failed"
	echo "You must configure your repository and set \"tagretloginusername\" config paraneter"
	echo "Go to your repository and run: git config hooks.tagretloginusername <url>"
	echo "Or add \"tagretloginusername\" parameter to your config file"
	exit
fi

# password
password=$(git config hooks.tagretloginpassword || echo $error) 
# check username
if [ "$username" == $error ]; then
	# URL error
	echo "error: Login failed"
	echo "You must configure your repository and set \"tagretloginpassword\" config paraneter"
	echo "Go to your repository and run: git config hooks.tagretloginpassword <url>"
	echo "Or add \"tagretloginpassword\" parameter to your config file"
	exit
fi

# login
# @todo: hide curl output
curl -b /tmp/cookie_git -c /tmp/cookie_git -d "username=$username&password=$password" "$loginurl"

# The URL to send the commit information to 
url=$(git config hooks.tagretcommiturl || echo $error) 
# check URL
if [ $url == $error ]; then
	# URL error
	echo "error: Commits information wasn't sent"
	echo "You must configure your repository and set \"tagretcommiturl\" config paraneter"
	echo "Go to your repository and run: git config hooks.tagretcommiturl <url>"
	echo "Or add \"tagretcommiturl\" parameter to your config file"
	exit
fi

while read oldrev newrev ref
do
	# prepare our JSON object
	json="
	{
		\"before\": \"$oldrev\",
		\"after\": \"$newrev\",
		\"commits\": [
		"
		comma=""
		for rev in $(git rev-list $oldrev..$newrev)
		do
			# first comma check
			# @todo: '+=' operation doesn't work so we use json=$json"string" instead of json+="string"
			json=$json$comma
			if [ $comma=="" ]; then
				comma=","
			fi
			
			# prepare JSON for commit
			json=$json"{"
				# id
				json=$json"\"id\": \"$rev\","
				
				# message
				# handle multiline commit messages
				read -d '' message <<EOF
\"message\": \"$(git cat-file commit $rev | sed '1,/^$/d')\",
EOF
				#json=$json$(echo -e "\"message\": \"$message\",")
				#json=$json$(printf "%s" "$message")
				message=$(echo -e $message)
				# encode the percent character '%' as %25
				message=$(echo $message | sed 's/%/%25/g')
				# add message to JSON
				json=$json$message
				
				# Author
				author_line=$(git cat-file commit $rev | sed '1,2d' | sed '2,$d')
				json=$json"\"author\": {";
					# email
					email=$(echo $author_line | sed -r 's/.*<//' | sed -r 's/>.*//')
					json=$json"\"email\": \"$email\","
					# name
					author=$(echo $author_line | sed -r 's/author //')
					name=$(echo $author | sed -r 's/\s<.*//')
					json=$json"\"name\": \"$name\""
				json=$json"},";
				
				# Committer
				committer_line=$(git cat-file commit $rev | sed '1,3d' | sed '3~3d')
				json=$json"\"committer\": {";
					# email
					committer_email=$(echo $committer_line | sed -r 's/.*<//' | sed -r 's/>.*//')
					json=$json"\"email\": \"$committer_email\","
					# name
					committer=$(echo $committer_line | sed -r 's/committer //')
					name=$(echo $committer | sed -r 's/\s<.*//')
					json=$json"\"name\": \"$name\""
				json=$json"},";
				
				# timestamp
				time=$(echo $author_line | sed -r 's/.*>\s//')
				# timestamp format: "2008-02-15T14:36:34-08:00"
				# @todo: what is "-08:00" in this format?
				# %Y-%m-%dT%H:%M:%S
				timastamp=$(perl -mbigint -mPOSIX -e "print( POSIX::strftime(\"%Y-%m-%d %H:%M:%S\",localtime( $time ) ))")
				json=$json"\"timestamp\": \"$timastamp\","
				
				# @todo: added, url, distinct, modified, removed
				# added
				json=$json"\"added\": []"
			json=$json"}"
		done

		json=$json"
			],
			\"ref\": \"$refname\","
		
		# repository
		json=$json"\"repository\": {"
			# @todo: url
			#repository_url=$(git config remote.origin.url)
			json=$json"\"url\": \"\","
			# @todo: name
			json=$json"\"name\": \"\""
		json=$json"}"
	json=$json"}"

	# send JSON
	# @todo: hide curl output
	curl -b /tmp/cookie_git -c /tmp/cookie_git -d "payload=$json" "$url"
	
	## for debugging ##
	#echo $json
	#curl -b /tmp/cookie_git -c /tmp/cookie_git -v -H -X POST -d "payload=$json" "$url"
	#echo $(git config -l)
done
